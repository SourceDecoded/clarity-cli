{"version":3,"sources":["../../src/commands/init-project.js"],"names":["templates","babel","system","program","version","option","parse","process","argv","args","command","projectName","type","templateName","templateDirectory","join","__dirname","projectDirectory","cwd","packageJsonFile","existingPackageJson","Error","console","log","readJson","catch","then","json","copy","packageJson","newPackageJson","Object","assign","name","writeJson","exec"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,YAAY;AACZC,WAAO,kBADK;AAEZC,YAAQ;AAFI,CAAhB;;kBAKe,UAACC,OAAD,EAAa;;AAExBA,YAAQC,OAAR,CAAgB,OAAhB,EACKC,MADL,CACY,mBADZ,EACiC,gFADjC,EAEKC,KAFL,CAEWC,QAAQC,IAFnB;;AAIA,QAAIC,OAAON,QAAQM,IAAnB;AACA,QAAIC,UAAUD,KAAK,CAAL,CAAd;AACA,QAAIE,cAAcF,KAAK,CAAL,KAAW,EAA7B;AACA,QAAIG,OAAOT,QAAQS,IAAR,IAAgB,OAA3B;AACA,QAAIC,eAAeb,UAAUY,IAAV,KAAmBZ,UAAUC,KAAhD;;AAEA,QAAIa,oBAAoB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,kBAArB,EAAyCH,YAAzC,CAAxB;AACA,QAAII,mBAAmBV,QAAQW,GAAR,EAAvB;AACA,QAAIC,kBAAkB,eAAKJ,IAAL,CAAUE,gBAAV,EAA4B,cAA5B,CAAtB;AACA,QAAIG,sBAAsB,IAA1B;;AAEA,QAAIT,eAAe,IAAnB,EAAyB;AACrB,cAAM,IAAIU,KAAJ,CAAU,gCAAV,CAAN;AACH;;AAEDC,YAAQC,GAAR,CAAY,uBAAZ;;AAEA,sBAAGC,QAAH,CAAYL,eAAZ,EAA6BM,KAA7B,CAAmC,YAAI;AACnC,eAAO,EAAP;AACH,KAFD,EAEGC,IAFH,CAEQ,UAACC,IAAD,EAAU;AACdP,8BAAsBO,IAAtB;AACA,eAAO,kBAAGC,IAAH,CAAQd,iBAAR,EAA2BG,gBAA3B,CAAP;AACH,KALD,EAKGS,IALH,CAKQ,YAAM;AACVJ,gBAAQC,GAAR,CAAY,2BAAZ;AACA,eAAO,kBAAGC,QAAH,CAAYL,eAAZ,CAAP;AACH,KARD,EAQGO,IARH,CAQQ,UAACG,WAAD,EAAiB;AACrB,YAAIC,iBAAiBC,OAAOC,MAAP,CAAc,EAAEC,MAAMtB,WAAR,EAAd,EAAqCkB,WAArC,EAAkDT,mBAAlD,CAArB;;AAEAE,gBAAQC,GAAR,CAAY,wBAAZ;AACA,eAAO,kBAAGW,SAAH,CAAaf,eAAb,EAA8BW,cAA9B,CAAP;AACH,KAbD,EAaGJ,IAbH,CAaQ,YAAM;AACVJ,gBAAQC,GAAR,CAAY,+CAAZ;AACA,eAAO,iCAAaY,IAAb,CAAkB,aAAlB,EAAiC,EAAEjB,KAAKD,gBAAP,EAAjC,CAAP;AACH,KAhBD,EAgBGS,IAhBH,CAgBQ,YAAM;AACVJ,gBAAQC,GAAR,CAAY,uDAAZ;AACH,KAlBD;AAoBH,C","file":"init-project.js","sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\nimport childProcess from \"child-process-es6-promise\";\n\nvar templates = {\n    babel: \"project-template\",\n    system: \"system-project-template\"\n};\n\nexport default (program) => {\n\n    program.version(\"0.0.1\")\n        .option(\"-t, --type [type]\", \"Type of project. Options are: 'babel' (default), 'system' (dispatcher system).\")\n        .parse(process.argv);\n\n    var args = program.args;\n    var command = args[0];\n    var projectName = args[1] || \"\";\n    var type = program.type || \"babel\"\n    var templateName = templates[type] || templates.babel;\n\n    var templateDirectory = path.join(__dirname, \"../../templates/\", templateName);\n    var projectDirectory = process.cwd();\n    var packageJsonFile = path.join(projectDirectory, \"package.json\");\n    var existingPackageJson = null;\n\n    if (projectName == null) {\n        throw new Error(\"Please provide a project name.\");\n    }\n\n    console.log(\"Creating template....\");\n\n    fs.readJson(packageJsonFile).catch(()=>{\n        return {};\n    }).then((json) => {\n        existingPackageJson = json;\n        return fs.copy(templateDirectory, projectDirectory);\n    }).then(() => {\n        console.log(\"Modifying package.json...\");\n        return fs.readJson(packageJsonFile);\n    }).then((packageJson) => {\n        var newPackageJson = Object.assign({ name: projectName }, packageJson, existingPackageJson);\n\n        console.log(\"Saving package.json...\");\n        return fs.writeJson(packageJsonFile, newPackageJson);\n    }).then(() => {\n        console.log(\"Running npm for you, this may take a while...\");\n        return childProcess.exec(\"npm install\", { cwd: projectDirectory });\n    }).then(() => {\n        console.log(\"Locked and loaded, you are ready to go. Happy coding.\");\n    });\n\n}\n"]}